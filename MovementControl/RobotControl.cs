using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Text;
using System.Threading.Tasks;

namespace MovementControl
{
    class RobotControl
    {
        GlobalDataSet globalDataSet;
        byte[] position, ids, msgStart, msgEnd, speed;
        byte[] byteArray = new byte[64];
        // NOTE: MAX 8 IDs per cycle available, because there is a problem to send more than one byte...
        // TODO: Load txt-files into cloud / database and implement possibility to download txt-file from raspberry and import as list
        // TODO: Add possibility to tranfer values with commata (with 4 bytes the max is 32768 -> factor 100 is enough for sensor values like 89.35

        // Values need to be positive to reduces transmission data (Only 4 byte per position)
        #region positionLists
        byte[] positionList0 = {0,
0,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
90,
90,
90,
90,
90,
90,
90,
90,
90,
90,
90,
90,
90,
90,
90,
90,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,};

        byte[] positionList1 = {0,
0,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
90,
90,
90,
90,
90,
90,
90,
90,
90,
90,
90,
90,
90,
90,
90,
90,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
89,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
88,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
86,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
84,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
81,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
77,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
73,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
68,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
63,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
57,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
51,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
45,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
38,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
30,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
23,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
15,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
7,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,};
        #endregion


        public RobotControl(GlobalDataSet globalDataSet)
        {
            this.globalDataSet = globalDataSet;
            initControlData();
        }

        public void initControlData()
        {
            // Set start of message
            msgStart = BitConverter.GetBytes(9999);
            for (int i = 0; i < msgStart.Length; i++) byteArray[i] = msgStart[i];

            // Set ids
            // Binär (i.e. 0000 0011 for motor 1 and 2)
            ids = BitConverter.GetBytes((short)3);
            for (int i = 0; i < ids.Length; i++) byteArray[i + 4] = ids[i];
        }

        public void moveForward(int stepsize, int velocity, int steps)
        {
            // Set speed
            speed = BitConverter.GetBytes(velocity);
            for (int i = 0; i < speed.Length; i++) byteArray[i + 8] = speed[i];

            for (int k = 0; k < steps; k++)
            {
                for (int j = 0; j < positionList1.Length; j++)
                {
                    // Set position from database for dxl 1
                    position = BitConverter.GetBytes((short)positionList0[j]);
                    for (int i = 0; i < position.Length; i++) byteArray[i + 12] = position[i];

                    // Set position from database for dxl 2
                    position = BitConverter.GetBytes((short)positionList1[j]);
                    for (int i = 0; i < position.Length; i++) byteArray[i + 16] = position[i];

                    // Set end of message
                    msgEnd = BitConverter.GetBytes((short)8888);
                    for (int i = 0; i < msgEnd.Length; i++) byteArray[i + 20] = msgEnd[i];

                    Debug.WriteLine("---");
                    Debug.WriteLine("J: " + j);
                    Debug.WriteLine("---");
                    sendToPort(byteArray);
                }
            }
        }

        private async void sendToPort(byte[] byteArray)
        {
            var bufferArray = byteArray.AsBuffer();
            await globalDataSet.Port.OutputStream.WriteAsync(bufferArray);
        }

        public void moveBackward()
        {

        }

        public void moveRight()
        {

        }

        public void moveLeft()
        {

        }

        public async void testFunction(byte data)
        {
            byte[] byteArray = { data };
            var bufferArray = byteArray.AsBuffer();
            await globalDataSet.Port.OutputStream.WriteAsync(bufferArray);
        }
    }
}
